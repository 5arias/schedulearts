diff --git a/sites/all/modules/resource_conflict/resource_conflict.module b/sites/all/modules/resource_conflict/resource_conflict.module
index 64bd34e..6b885d7 100644
--- a/sites/all/modules/resource_conflict/resource_conflict.module
+++ b/sites/all/modules/resource_conflict/resource_conflict.module
@@ -60,36 +60,38 @@ function _resource_conflict_display_conflict_errors($node, $conflicting_nodes) {
   $our_demands = _resource_conflict_get_node_resource_demand($node);
   foreach ($conflicting_nodes as $conflicting_node) {
     $other_demands = _resource_conflict_get_node_resource_demand($conflicting_node);
-
     // select the resources that both this node and the other node demands
     $conflicting_resources = array();
-    foreach ($our_demands as $our_demand => $dummy) {
-      if (isset($other_demands[$our_demand])) {
-        $conflicting_resources[$our_demand] = node_load($our_demand);
+    foreach ($other_demands as $other_demand) {
+      foreach ($our_demands as $our_demand) {
+        if ($our_demand['target_id'] == $other_demand['target_id'] && $our_demand['target_type'] == $other_demand['target_type']) {
+//          $conflicting_resources[] = entity_load($our_demand['target_type'], array($our_demand['target_id']));
+          $conflicting_resources[] = entity_metadata_wrapper($our_demand['target_type'], $our_demand['target_id']);
+        }
       }
     }
-
+  
     // display the error for each conflict
     foreach ($conflicting_resources as $conflicting_resource) {
       $date_field = variable_get('rc_date_field_' . $conflicting_node->type, FALSE);
       if (strpos($date_field, 'field_', 0) === 0) {
         $type = DATE_ISO;
         $startobj =  new DateObject($conflicting_node->{$date_field}['und'][0]['value']);
-        $start = $startobj->format('U');
+        $start = $startobj->format('Y-m-d H:i');
         $endobj =  new DateObject($conflicting_node->{$date_field}['und'][0]['value2']);
-        $end = $endobj->format('U');
+        $end = $endobj->format('Y-m-d H:i');
       }
       else {
-        $start = format_date($conflicting_node->event_start);
-        $end = format_date($conflicting_node->event_end);
+        $start = format_date($conflicting_node->event_start, 'Y-m-d H:i');
+        $end = format_date($conflicting_node->event_end, 'Y-m-d H:i');
       }
 
       $error = t('There is a resource conflict: <a href="@resource-url">%resource</a> is currently booked for <a href="@booker-url">%booker</a> from %start to %end. Please choose a different time or a different resource.',
         array(
         '@booker-url' => url('node/' . $conflicting_node->nid),
         '%booker' => $conflicting_node->title,
-        '@resource-url' => url('node/' . $conflicting_resource->nid),
-        '%resource' => $conflicting_resource->title,
+        '@resource-url' => $conflicting_resource->url->value(array('sanitize' => 'TRUE')),
+        '%resource' => $conflicting_resource->name->value(),
         '%start' => $start,
         '%end' => $end,
       )
@@ -99,9 +101,9 @@ function _resource_conflict_display_conflict_errors($node, $conflicting_nodes) {
       // multiple form errors on the same field.  So, we just pass in
       // a bogus (but unique) ID for each error message, to ensure
       // that all conflicts are reported simultaneously.  We use the
-      // nid of the conflicting resource (thing) appended with the nid
+      // title of the conflicting resource (thing) appended with the nid
       // of the conflicting node (reservation event).
-      $conflict_id = $conflicting_resource->nid . '_' . $conflicting_node->nid;
+      $conflict_id = $conflicting_resource->name->value() . '_' . $conflicting_node->nid;
       form_set_error($conflict_id, $error);
     }
   }
@@ -120,6 +122,7 @@ function resource_conflict_form_alter(&$form, $form_state, $form_id) {
       '#type' => 'fieldset',
       '#title' => t('Resource Conflict'),
       '#collapsible' => TRUE,
+      '#group' => 'additional_settings',
     );
 
     // The user is adding a new content type
@@ -131,20 +134,19 @@ function resource_conflict_form_alter(&$form, $form_state, $form_id) {
       );
       return;
     }
-
     $date_fields = array();
     if ($type != NULL) {
       $fields = field_info_instances('node', $type);
       foreach ($fields as $fieldname => $field) {
-        if ($field['display']['default']['module'] == 'node_reference') {
-          $nodereference_fields[$fieldname] = $field['label'];
-        }
-        elseif (($field['display']['default']['module'] == 'date')&&($field['required'] == 1)) {
+        if (isset($field['display']['default']['module'])&&($field['display']['default']['module'] == 'date')&&($field['required'] == 1)) {
           $fieldinfo = field_info_field($fieldname);
           if ($fieldinfo['settings']['todate'] == 'required' ) {
             $date_fields[$fieldname] = $field['label'];
           }
         }
+        elseif (isset($field['widget']['module']) && ($field['widget']['module'] == 'entityreference')) {
+          $nodereference_fields[$fieldname] = $field['label'];
+        }
       }
     }
 
@@ -177,7 +179,6 @@ function resource_conflict_form_alter(&$form, $form_state, $form_id) {
 
     if (!empty($requirements)) {
       _resource_conflict_disable($type, TRUE);
-
       $form['resource_conflict_set']['requirements'] = array(
         '#prefix' => '<p>' . t('The following requirements for Resource Conflict have not been met:') . '</p><ol>',
         '#suffix' => '</ol>',
@@ -289,6 +290,7 @@ function _resource_conflict_get_node_resource_demand($node) {
   $reference_fields = variable_get('rc_reference_fields_' . $type, array());
   $demand = array();
   foreach ($reference_fields as $reference_field) {
+    $fieldinfo = field_info_field($reference_field);
     $references = $node->{$reference_field}['und'];
     foreach ($references as $key => $reference) {
       /**
@@ -298,14 +300,19 @@ function _resource_conflict_get_node_resource_demand($node) {
        * file the error against the fake 'no_resources' element as CCK files
        * it's own "Illegal choice" error before we get called.
        */
-      if (is_numeric($reference['nid'])) {
-        $demand[$reference['nid']] = TRUE;
+      if (is_numeric($reference['target_id'])) {
+        $demand[] = array(
+          'target_id' => $reference['target_id'], 
+          'target_type' => $fieldinfo['settings']['target_type'],
+        );
+        //$demand[$reference['target_id']] = TRUE;
       }
-      else {
+      elseif (($reference != 'Add another item') && ($reference['target_id'] != '')) {
         form_set_error('no_resources', t('No bookable resources have been created. Please create resources to book before attempting to create a resource booking.'));
       }
     }
   }
+  //form_set_error('tester', 'everything is fine, but you cannot move on for test purposes');
   return $demand;
 }
 

<?php

//@file tweaks behavior on call and event creation forms for an easier workflow.

/**
 * Implements hook_form_alter()
 */
function schedulearts_eventwiz_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
  case 'event_node_form':
    $form['actions']['addcall'] = array(
      '#type' => 'submit',
      '#value' => 'Save and add Calls',
      '#weight' => -41,
      '#submit' => array('node_form_submit', 'schedulearts_eventwiz_addcall_form_submit'),
    );
    break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *   FORM_ID: call_node_form
 */
function  schedulearts_eventwiz_form_call_node_form_alter(&$form,&$form_state) {

  $form['actions']['save_and_event'] = array(
    '#type' => 'submit',
    '#value' => 'Save and create new event',
    '#weight' => -40,
    '#submit' => array('node_form_submit', 'schedulearts_eventwiz_save_and_event_form_submit'),
  );

  if (isset($form['field_call_parent_event']) && isset($_GET['edit'])) {
    // Load the rehearsal_calls view with parent event nid as argument.
    $parent_nid = $_GET['edit']['field_call_parent_event']['und'];
    $view = views_get_view('rehearsal_calls');
    $view->set_display('block');
    $view->set_arguments(array($parent_nid));
    $view->pre_execute();
    $view->execute();

    // Attach the view to the form.
    $form['calls_table'] = array(
      '#type' => 'item',
      '#markup' => $view->render(),
      '#title' => t('Call Times'),
    );
    // Attach the edit even button to the form.
    $form['actions']['edit_event'] = array(
      '#type' => 'submit',
      '#value' => t('Edit event'),
      '#weight' => -41,
      '#submit' => array('schedulearts_eventwiz_edit_event_form_submit'),
    );
  }
  if (isset($form['actions']['addanother'])) {
    $form['actions']['addanother']['#submit'][] = 'schedulearts_eventwiz_addanother_submit_handler';
  }
}

/**
 * Submit handler for save_and_event submits on Call forms. Redirects user to event add form.
 */
function schedulearts_eventwiz_save_and_event_form_submit(&$form, &$form_state) {
  if (isset($form['actions']['save_and_event'])) {
    $form_state['redirect'] = 'node/add/event';
  }
}

/**
 * Submit handler for addanother submits on Call forms. Retains post information.
 */
function schedulearts_eventwiz_addanother_submit_handler($form, &$form_state) {
  if (isset($form['actions']['addanother'])) {
    $form_state['redirect'] = array($form_state['redirect']);
    $form_state['redirect'][]['query']['edit']['field_call_parent_event']['und'] = $form_state['values']['field_call_parent_event']['und']['0']['target_id'];
  }
}
       
/**
 * Submit handler for addcall submits on Event forms. Redirects user to add a relevant call.
 */
function schedulearts_eventwiz_addcall_form_submit($form, &$form_state) {
  if (isset($form['actions']['addcall'])) {
    $form_state['redirect'] = array('node/add/call');
    $form_state['redirect'][]['query']['edit']['field_call_parent_event']['und'] = $form_state['values']['nid'];
  }
}

/**
 * Submit handler for edit_event submits on Call forms. Redirects the user to relevant event edit form.
 */
function schedulearts_eventwiz_edit_event_form_submit(&$form, &$form_state) {
  if (isset($form['actions']['edit_event']) && isset ($form['field_call_parent_event'][$form['field_call_parent_event']['#language']]['#default_value'])) {
    $parent_nid = $form['field_call_parent_event'][$form['field_call_parent_event']['#language']]['#default_value'][0];
    $form_state['redirect'] = 'node/' . $parent_nid . '/edit';
  }
}


/**
 * Implements hook_block_info()
 */
function schedulearts_eventwiz_block_info() {
  // Our "Add Calls" button
  $blocks['add_calls'] = array(
    'info' => t('Event > Add Calls button'),
    'status' => TRUE,
    'region' => 'content',
    'weight' => -25,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'events/*',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view()
 */
function schedulearts_eventwiz_block_view($delta = '') {
  switch ($delta) {
  case 'add_calls':
    $block['content'] = schedulearts_eventwiz_block_contents($delta);
    return $block;
    break;
  }
}

/**
 * The Add Calls button block, to be positioned on Events
 */
function schedulearts_eventwiz_block_contents($delta) {
  switch ($delta) {
  case 'add_calls':
    if (user_access('create call content')) {
      $current_nid = (arg(0) == 'node' && is_numeric(arg(1)) ? arg(1) : NULL);
      return (drupal_get_form('schedulearts_eventwiz_block_addcall_form', $current_nid));
    }
  }
}

/**
 * Defines the form for Add Calls button block
 */
function schedulearts_eventwiz_block_addcall_form($form_id, &$form_state, $current_nid) {
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Add Calls',
  );
  if (!empty($form_state['build_info']['args']['0'])) {
    $current_nid = $form_state['build_info']['args']['0'];
    $form['#action'] = url('node/add/call', array('query' => array('edit' => array('field_call_parent_event' => array('und' => $current_nid)))));
  }
  return $form;
}

/*
 * Implements hook_init()
 * Add my custom stylesheet to all themes
 */
function schedulearts_eventwiz_init() {
  $options = array(
    'group' => CSS_THEME,
    'every_page' => TRUE,
    'weight' => 9999
  );
  drupal_add_css(drupal_get_path('module', 'schedulearts_eventwiz') . '/schedulearts_eventwiz.css', $options);
}

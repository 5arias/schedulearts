<?php
/**
 * @file
 * Provide a print layout for the schedules.
 */

/**
 * Implements hook_permission().
 */
function schedulearts_print_permission() {
  return array(
    'schedule print page' => array(
      'title' => 'Access schedule print page',
    ),
  );
}
 
/**
 * Implementation of hook_menu().
 */
function schedulearts_print_menu() {
  $items = array();
  
  $items['schedule/%/print'] = array(
      'page callback' => 'schedulearts_print_page',
      'page arguments' => array(1),
      'access arguments' => array('schedule print page'),
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Return every call for a day grouped by events.
 * 
 * The query is a bit redundant because it contains event specific info for
 * every call but at least it's only one query.
 * 
 * @param $date
 *   The date in Y-m-d format.
 * @return
 *   An array keyed by the event nid.
 */
function schedulearts_print_event_data_query($date) {
  $data = array();
  $query = db_select('node', 'n');  
  
  $query->join('field_data_field_event_date', 'd', 'd.entity_id = n.nid');
  $query->join('field_data_field_call_parent_event', 'p', 'p.field_call_parent_event_target_id = n.nid');
  $query->join('field_data_field_event_type', 't', 't.entity_id = n.nid');
  $query->join('taxonomy_term_data', 'td', 't.field_event_type_tid = td.tid');
  $query->join('field_data_field_event_location', 'l', 'l.entity_id = n.nid');
    
  $query->leftJoin('field_data_field_event_groups_tax', 'g', 'g.entity_id = p.entity_id');
  $query->leftJoin('field_data_field_event_individuals', 'i', 'i.entity_id = p.entity_id');
  $query->leftJoin('field_data_body', 'b', 'b.entity_id = n.nid');
  $query->leftJoin('field_data_body', 'cb', 'cb.entity_id = p.entity_id');
  $query->leftJoin('field_data_field_event_date', 'cd', 'cd.entity_id = p.entity_id');
  
  $query->fields('n', array('title', 'nid'));
  $query->fields('td', array('name'));
  $query->fields('d', array('field_event_date_value', 'field_event_date_value2'));
  $query->fields('b', array('body_value'));
  $query->fields('l', array('field_event_location_target_id'));
  $query->fields('p', array('entity_id'));
  $query->fields('g', array('field_event_groups_tax_tid'));
  $query->fields('i', array('field_event_individuals_target_id'));
  $query->fields('cb', array('body_value'));
  $query->fields('cd', array('field_event_date_value', 'field_event_date_value2'));

  $query->condition('d.field_event_date_value', $date . '%', 'LIKE');
  $query->condition('cd.field_event_date_value', $date . '%', 'LIKE');
  $query->orderBy('d.field_event_date_value');
  $query->orderBy('cd.field_event_date_value');
  
  $result = $query->execute();  

  foreach ($result as $value) {
    if (!isset($data[$value->nid])) {
      $data[$value->nid]['type'] = $value->name;
      $data[$value->nid]['data'] = array(
                                          'title' => $value->title,
                                          'location' => $value->field_event_location_target_id,
                                          'date' => $value->field_event_date_value,
                                          'date2' => $value->field_event_date_value2,
                                          'body' => $value->body_value,
                                        );
    }
    switch ($value->name) {
      case 'Rehearsal':
        if (isset($value->field_event_groups_tax_tid)) {
          $data[$value->nid]['data']['calls'][$value->field_event_date_value]['add']['groups'][] = $value->field_event_groups_tax_tid;
          $data[$value->nid]['data']['calls'][$value->field_event_date_value2]['rel']['groups'][] = $value->field_event_groups_tax_tid;
        }
        if (isset($value->field_event_individuals_target_id)) {
          $data[$value->nid]['data']['calls'][$value->field_event_date_value]['add']['individuals'][] = $value->field_event_individuals_target_id;
          $data[$value->nid]['data']['calls'][$value->field_event_date_value2]['rel']['individuals'][] = $value->field_event_individuals_target_id;
        }
        break;
      case 'Coaching':
      case 'Performance':
        if (!isset($data[$value->nid]['data']['calls'][$value->entity_id])) {
          $data[$value->nid]['data']['calls'][$value->entity_id] = array(
                                                                        'date' => $value->cd_field_event_date_value,
                                                                        'date2' => $value->cd_field_event_date_value2,
                                                                        );
        }
        if (isset($value->field_event_groups_tax_tid)) {
          $data[$value->nid]['data']['calls'][$value->entity_id]['groups'][] = $value->field_event_groups_tax_tid;
        }
        if (isset($value->field_event_individuals_target_id)) {
          $data[$value->nid]['data']['calls'][$value->entity_id]['individuals'][] = $value->field_event_individuals_target_id;
        }
        if (isset($value->cb_body_value)) {
          $data[$value->nid]['data']['calls'][$value->entity_id]['body'] = $value->cb_body_value;
        }
        break;
    }
    
  }

  return $data;
}

/**
 * Menu callback; Output the schedule tables.
 * 
 * @param $date
 *   The date in Y-m-d format.
 * @return
 *   The rendered page.
 */
function schedulearts_print_page($date) {
  // Get the data.
  $data = schedulearts_print_event_data_query($date);

  $output = '';
  
  foreach ($data as $value) {
    if ($value['type'] == 'Rehearsal') {
      $output .= schedulearts_print_rehearsal_content($value['data']);
    }
    else {
      $output .= schedulearts_print_other_content($value['data'], $value['type']);
    }    
  }

  drupal_add_css(drupal_get_path('module', 'schedulearts_print') . '/css/schedulearts_print.css', array('preprocess' => FALSE));
  
  return $output;
}

/**
 * Process rehearsal calls.
 * 
 * Basically what we do here is output the header and the first row with the
 * event's description, then construct an array where the keys are the call
 * times, and each element can have a description, a sub-array of ADD names, and
 * a sub-array of REL names, and then output this array line by line.
 * 
 * @param $data
 *   The array of calls.
 * @return
 *   The rendered table.
 */
function schedulearts_print_rehearsal_content($data) {  
  $header = array(
                  schedulearts_print_format_date($data['date']) . ' - ' . schedulearts_print_format_date($data['date2']),
                  $data['title'],
                  node_load($data['location'])->title
                  );
  if (isset($data['body'])) {
    $rows[] = array('data' => array('', '<span class="event-desc">' . $data['body'] . '</span>', ''), 'no_striping' => TRUE);
  }
  foreach ($data['calls'] as $time => $call) {
    if (isset($call['add'])) {
      if (isset($call['add']['groups'])) {
        $groups = taxonomy_term_load_multiple($call['add']['groups']);
        foreach ($groups as $group) {
          $add[] = $group->name;
        } 
      }
      if (isset($call['add']['individuals'])) {
        $individuals = user_load_multiple($call['add']['individuals']);
        foreach ($individuals as $individual) {
          $add[] = $individual->name;
        }
      }
      $description = isset($call['description']) ? $call['description'] : '';
      $add = implode(', ', $add);
      if ($time == $data['date']) {
        $rows[] = array('data' => array('', '<span class="space"><em>' . $add . '</em></span>', $description), 'no_striping' => TRUE);
      }
      else {
        $called = '<span class="prefix">' . t('ADD: ') . '</span><em>' . $add . '</em>';
        // If there are ADDs and RELs at the same time, we put the RELs in a new row.
        if (isset($call['rel'])) {
          if (isset($call['rel']['groups'])) {
            $groups = taxonomy_term_load_multiple($call['rel']['groups']);
            foreach ($groups as $group) {
              $rel[] = $group->name;
            } 
          }
          if (isset($call['rel']['individuals'])) {
            $individuals = user_load_multiple($call['rel']['individuals']);
            foreach ($individuals as $individual) {
              $rel[] = $individual->name;
            }
          }
          $rel = implode(', ', $rel);
          $called .= '<br /><span class="prefix">' . t('REL: ') . '</span><em>' . $rel . '</em>';
        }
        $rows[] = array('data' => array(schedulearts_print_format_date($time), $called, $description), 'no_striping' => TRUE);
      }
    }
    if (isset($call['rel']) && $time != $data['date2']) {
      if (isset($call['rel']['groups'])) {
        $groups = taxonomy_term_load_multiple($call['rel']['groups']);
        foreach ($groups as $group) {
          $rel[] = $group->name;
        } 
      }
      if (isset($call['rel']['individuals'])) {
        $individuals = user_load_multiple($call['rel']['individuals']);
        foreach ($individuals as $individual) {
          $rel[] = $individual->name;
        }
      }
      $description = isset($call['description']) ? $call['description'] : '';
      $rel = implode(', ', $rel);
      $rows[] = array('data' => array(
                                      schedulearts_print_format_date($time),
                                      '<span class="prefix">' . t('REL: ') . '</span><em>' . $rel . '</em>',
                                      $description
                                      ),
                      'no_striping' => TRUE);
    }
  }
  
  $output = theme('table',  array('header' => $header, 'rows' => $rows));
  
  return $output;
}

/**
 * Process performance and coaching calls.
 * 
 * @param $data
 *   The array of calls.
 * @param $type
 *   'Coaching' or 'Performance'.
 * @return
 *   The rendered table.
 */
function schedulearts_print_other_content($data, $type) {
  if ($type == 'Coaching') {
    $time = schedulearts_print_format_date($data['date']) . ' - ' . schedulearts_print_format_date($data['date2']);
  }
  else {
    $time = schedulearts_print_format_date($data['date']);
  }
  $header = array(
                  schedulearts_print_format_date($data['date']) . ' - ' . schedulearts_print_format_date($data['date2']),
                  $data['title'],
                  node_load($data['location'])->title
                 );
  if (isset($data['body'])) {
    $rows[] = array('data' => array('', '<span class="event-desc">' . $data['body'] . '</span>', ''), 'no_striping' => TRUE);
  }
  foreach ($data['calls'] as $call) {
    if (isset($call['groups'])) {
      $groups = taxonomy_term_load_multiple($call['groups']);
      foreach ($groups as $group) {
        $called[] = '<em>' . $group->name . '</em>';
      }
    }
    if (isset($call['individuals'])) {
      $individuals = user_load_multiple($call['individuals']);
      foreach ($individuals as $individual) {
        $called[] = '<em>' . $individual->name . '</em>';
      }
    }
    $description = isset($call['body']) ? $call['body'] : '';
    if ($type == 'Coaching') {
      $time = schedulearts_print_format_date($call['date']) . ' - ' . schedulearts_print_format_date($call['date2']);
    }
    else {
      $time = schedulearts_print_format_date($call['date']);
    }
    $rows[] = array('data' => array($time, implode(', ', $called), $description), 'no_striping' => TRUE);
    unset($called);
  }
  
  $output = theme('table',  array('header' => $header, 'rows' => $rows));
  
  return $output;
}



/**
 * Change date format.
 * 
 * @param $date
 *   The date in 'Y-m-d H:i:s' format.
 * @return
 *   The date in 'h:i A' format.
 **/
function schedulearts_print_format_date($date) {
  $timestamp = strtotime($date);
  $time = date('h:i A', $timestamp);  
  return $time;
}

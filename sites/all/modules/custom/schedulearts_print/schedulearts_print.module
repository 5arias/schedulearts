<?php
/**
 * @file
 * Provide a print layout for the schedules.
 */

/**
 * Implements hook_permission().
 */
function schedulearts_print_permission() {
  return array(
    'schedule print page' => array(
      'title' => 'Access schedule print page',
    ),
  );
}
 
/**
 * Implementation of hook_menu().
 */
function schedulearts_print_menu() {
  $items = array();
  
  $items['schedule/%/print'] = array(
      'page callback' => 'schedulearts_print_page',
      'page arguments' => array(1),
      'access arguments' => array('schedule print page'),
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Return every call for a day grouped by events.
 * 
 * The query is a bit redundant because it contains event specific info for
 * every call but at least it's only one query.
 * 
 * @param $date
 *   The date in Y-m-d format.
 * @return
 *   An array keyed by the event nid.
 */
function schedulearts_print_event_data_query($date) {
  $data = array();
  $query = db_select('node', 'n');  
  
  $query->join('field_data_field_event_date', 'd', 'd.entity_id = n.nid');
  $query->join('field_data_field_call_parent_event', 'p', 'p.field_call_parent_event_target_id = n.nid');
  $query->join('field_data_field_event_type', 't', 't.entity_id = n.nid');
  $query->join('taxonomy_term_data', 'td', 't.field_event_type_tid = td.tid');
  $query->join('field_data_field_event_location', 'l', 'l.entity_id = n.nid');
    
  $query->leftJoin('field_data_field_event_groups_tax', 'g', 'g.entity_id = p.entity_id');
  $query->leftJoin('field_data_field_event_individuals', 'i', 'i.entity_id = p.entity_id');
  $query->leftJoin('field_data_body', 'b', 'b.entity_id = n.nid');
  $query->leftJoin('field_data_body', 'cb', 'cb.entity_id = p.entity_id');
  $query->leftJoin('field_data_field_event_date', 'cd', 'cd.entity_id = p.entity_id');
  
  $query->fields('n', array('title', 'nid'));
  $query->fields('td', array('name'));
  $query->fields('d', array('field_event_date_value', 'field_event_date_value2'));
  $query->fields('b', array('body_value'));
  $query->fields('l', array('field_event_location_target_id'));
  $query->fields('p', array('entity_id'));
  $query->fields('g', array('field_event_groups_tax_tid'));
  $query->fields('i', array('field_event_individuals_target_id'));
  $query->fields('cb', array('body_value'));
  $query->fields('cd', array('field_event_date_value', 'field_event_date_value2'));

  $query->condition('d.field_event_date_value', $date . '%', 'LIKE');
  $query->orderBy('d.field_event_date_value');
  
  $result = $query->execute();  

  foreach ($result as $value) {
    // Put the type of the event in the top level so it's easy to check later.
    $data[$value->nid]['type'] = $value->name;
    $data[$value->nid]['data'][] = $value;
  }

  return $data;
}

/**
 * Menu callback; Output the schedule tables.
 * 
 * @param $date
 *   The date in Y-m-d format.
 * @return
 *   The rendered page.
 */
function schedulearts_print_page($date) {
  // Get the data.
  $data = schedulearts_print_event_data_query($date);

  $output = '';
  
  foreach ($data as $key => $value) {
    switch ($value['type']) {
      case 'Meeting':
        $output .= schedulearts_print_meeting_content($value['data']);
        break;
      case 'Performance':
        $output .= schedulearts_print_performance_content($value['data']);
        break;
      case 'Rehearsal':
        $output .= schedulearts_print_rehearsal_content($value['data']);
    }    
  }

  drupal_add_css(drupal_get_path('module', 'schedulearts_print') . '/css/schedulearts_print.css', array('preprocess' => FALSE));
  
  return $output;
}

/**
 * Process rehearsal calls.
 * 
 * Basically what we do here is output the header and the first row with the
 * event's description, then construct an array where the keys are the call
 * times, and each element can have a description, a sub-array of ADD names, and
 * a sub-array of REL names, and then output this array line by line.
 * 
 * @param $data
 *   The array of calls.
 * @return
 *   The rendered table.
 */
function schedulearts_print_rehearsal_content($data) {
  // Get the first element of the array because we need to treat it specially.
  // We get the data for the header and the first 2 rows from this element.
  $data_top = array_shift($data);
    
  $header = array(schedulearts_print_format_date($data_top->field_event_date_value) . ' - '
                                  . schedulearts_print_format_date($data_top->field_event_date_value2),
                                  $data_top->title,
                                  node_load($data_top->field_event_location_target_id)->title);
 
  // Put the called groups and individuals who have to be there from the start
  // into our array, and add the call description.
  if ($data_top->field_event_groups_tax_tid) {
    $calls[$data_top->cd_field_event_date_value]['add'][] = taxonomy_term_load($data_top->field_event_groups_tax_tid)->name;
  }
  if ($data_top->field_event_individuals_target_id) {
    $calls[$data_top->cd_field_event_date_value]['add'][] = user_load($data_top->field_event_individuals_target_id)->name;
  }
  $calls[$data_top->cd_field_event_date_value]['description'] = $data_top->cb_body_value;
  
  // Add the remaining calls to our array.
  foreach ($data as $value) {
    $calls[$value->cd_field_event_date_value]['description'] = $value->cb_body_value;
    if ($value->field_event_groups_tax_tid) {
      $calls[$value->cd_field_event_date_value]['add'][] = taxonomy_term_load($value->field_event_groups_tax_tid)->name;
    }
    if ($value->field_event_individuals_target_id) {
      $calls[$value->cd_field_event_date_value]['add'][] = user_load($value->field_event_individuals_target_id)->name;
    }
    // We only need to add end times that are sooner than the event's end.
    if ($value->cd_field_event_date_value2 != $data_top->field_event_date_value2) {
      if ($value->field_event_groups_tax_tid) {
        $calls[$value->cd_field_event_date_value2]['rel'][] = taxonomy_term_load($value->field_event_groups_tax_tid)->name;
      }
      if ($value->field_event_individuals_target_id) {
        $calls[$value->cd_field_event_date_value2]['rel'][] = user_load($value->field_event_individuals_target_id)->name;
      }
    }
  }  
  
  // Sort calls by time.
  ksort($calls);
  
  // Output event description, if set.
  if (isset($data_top->body_value)) {
    $rows[] = array('data' => array('', '<span class="event-desc">' . $data_top->body_value . '</span>', ''),
                    'no_striping' => TRUE);
  }
  
  // Get the first call, because we treat it specially.
  // In this row we don't display the call's time.
  $top_call = array_shift($calls);
  $called = implode(', ', $top_call['add']);
  $rows[] = array('data' => array('', '<span class="space"><em>' . $called . '</em></span>', $top_call['description']),
                  'no_striping' => TRUE);
  $called = '';
  
  // Process the rest.
  foreach ($calls as $time => $call) {
    if (isset($call['add'])) {
      $called .= '<span class="prefix">' . t('ADD: ') . '</span><em>' . implode(', ', $call['add']) . '</em>';
      // If there are ADDs and RELs at the same time, we put the RELs in a new row.
      if (isset($call['rel'])) {
        $called .= '<br />';
      }
    }
    if (isset($call['rel'])) {
      $called .= '<span class="prefix">' . t('REL: ') . '</span><em>' . implode(', ', $call['rel']) . '</em>';
    }
    $description = isset($call['description']) ? $call['description'] : '';
    $rows[] = array('data' => array(schedulearts_print_format_date($time), $called, $description),
                    'no_striping' => TRUE);
    $called = '';
  }
  
  $output = theme('table',  array('header' => $header, 'rows' => $rows));
  
  return $output;
}

/**
 * Process performance calls.
 * 
 * @param $data
 *   The array of calls.
 * @return
 *   The rendered table.
 */
function schedulearts_print_performance_content($data) {
  foreach ($data as $value) {
    if (!isset($header)) {
      $header = array(schedulearts_print_format_date($value->field_event_date_value) . ' - '
                    . schedulearts_print_format_date($value->field_event_date_value2),
                  $value->title,
                  node_load($value->field_event_location_target_id)->title);
      if (isset($value->body_value)) {
        $rows[] = array('data' => array('', '<span class="event-desc">' . $value->body_value . '</span>', ''),
                        'no_striping' => TRUE);
      }
    }
    if ($value->field_event_groups_tax_tid) {
      $called[] = '<em>' . taxonomy_term_load($value->field_event_groups_tax_tid)->name . '</em>';
    }
    if ($value->field_event_individuals_target_id) {
      $called[] = '<em>' . user_load($value->field_event_individuals_target_id)->name . '</em>';
    }
    $description = isset($value->cb_body_value) ? $value->cb_body_value : '';
    $rows[] = array('data' => array(schedulearts_print_format_date($value->field_event_date_value),
                                    implode(', ', $called),
                                    $description),
                    'no_striping' => TRUE);
  }
  $output = theme('table',  array('header' => $header, 'rows' => $rows));
  
  return $output;
}

/**
 * Process meeting calls.
 * 
 * @param $data
 *   The array of calls.
 * @return
 *   The rendered table.
 */
function schedulearts_print_meeting_content($data) {
  foreach ($data as $value) {
    if (!isset($header)) {
      $header = array(schedulearts_print_format_date($value->field_event_date_value) . ' - '
                    . schedulearts_print_format_date($value->field_event_date_value2),
                  $value->title,
                  node_load($value->field_event_location_target_id)->title);
      if (isset($value->body_value)) {
        $rows[] = array('data' => array('', '<span class="event-desc">' . $value->body_value . '</span>', ''),
                        'no_striping' => TRUE);
      }
    }
    if ($value->field_event_groups_tax_tid) {
      $called[] = '<em>' . taxonomy_term_load($value->field_event_groups_tax_tid)->name . '</em>';
    }
    if ($value->field_event_individuals_target_id) {
      $called[] = '<em>' . user_load($value->field_event_individuals_target_id)->name . '</em>';
    }
    $description = isset($value->cb_body_value) ? $value->cb_body_value : '';
    $rows[] = array('data' => array(schedulearts_print_format_date($value->field_event_date_value) . ' - '
                                      . schedulearts_print_format_date($value->field_event_date_value2),
                                    implode(', ', $called),
                                    $description),
                    'no_striping' => TRUE);
  }
  $output = theme('table',  array('header' => $header, 'rows' => $rows));
  
  return $output;
}



/**
 * Change date format.
 * 
 * @param $date
 *   The date in 'Y-m-d H:i:s' format.
 * @return
 *   The date in 'h:i A' format.
 **/
function schedulearts_print_format_date($date) {
  $timestamp = strtotime($date);
  $time = date('h:i A', $timestamp);  
  return $time;
}
